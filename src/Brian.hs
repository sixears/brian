{-# LANGUAGE UnicodeSyntax #-}
module Brian
  ( main
  ) where

import Base1

import Prelude ( Enum, undefined )

-- base --------------------------------

import Data.List.NonEmpty qualified as NonEmpty

import Control.Applicative ( optional )
import Control.Monad       ( foldM_, (=<<) )
import Data.List           ( drop, filter, maximum, reverse, takeWhile, zip )
import Data.List.NonEmpty  ( nonEmpty )
import Data.Maybe          ( catMaybes, fromMaybe )
import GHC.Exts            ( IsList(toList), IsString(fromString) )
import System.Environment  ( getArgs )
import System.IO           ( putStrLn )
import Text.Read           ( readEither )

-- containers --------------------------

import Data.Map.Strict qualified as Map
import Data.Set        qualified as Set

-- fpath -------------------------------

import FPath.File      ( File(FileR) )
import FPath.Parseable ( readM )
import FPath.RelFile   ( relfile )

-- HTTP --------------------------------

import Network.HTTP ( getResponseBody, postRequestWithBody, simpleHTTP )

-- lens --------------------------------

import Control.Lens.Getter  ( view )
import Control.Lens.Indexed ( itoList )
import Control.Lens.Setter  ( (<>~) )

-- logs-plus ---------------------------

import Log ( Log, infoT )

-- logging-effect ----------------------

import Control.Monad.Log ( LoggingT, MonadLog )

-- mockio-log --------------------------

import MockIO.Log ( DoMock(DoMock), MockIOClass )

-- monadio-plus ------------------------

import MonadIO.OpenFile ( readFileUTF8Lenient )

-- more-unicode ------------------------

import Data.MoreUnicode.Lens ( (‚ä©) )

-- neat-interpolation ------------------

import NeatInterpolation ( trimming )

-- optparse-applicative ----------------

import Options.Applicative ( Parser, argument, metavar )

-- safe-exceptions ---------------------

import Control.Exception.Safe ( mask, onException )

-- sqlite-simple -----------------------

import Database.SQLite.Simple         ( Connection, FromRow, NamedParam((:=)),
                                        Only(Only), Query, SQLData,
                                        ToRow(toRow), executeNamed, execute_,
                                        open, queryNamed, query_ )
import Database.SQLite.Simple.ToField ( ToField(toField) )

-- stdmain --------------------------------

import StdMain            ( stdMain )
import StdMain.UsageError ( AsUsageError, UsageFPIOTPError, throwUsageT )

-- tagsoup -----------------------------

import Text.HTML.TagSoup ( Tag, innerText, parseTags, partitions, (~/=), (~==) )

-- text --------------------------------

import Data.Text ( breakOn, intercalate, pack, splitOn, stripPrefix, unpack,
                   unwords, words )

-- text-printer ------------------------

import Text.Printer qualified as P

-- textual-plus ------------------------

import TextualPlus                         ( tparse )
import TextualPlus.Error.TextualParseError ( AsTextualParseError,
                                             throwAsTextualParseError )

-- word-wrap ---------------------------

import Text.Wrap ( FillStrategy(FillIndent), WrapSettings(fillStrategy),
                   defaultWrapSettings, wrapText )

------------------------------------------------------------
--                     local imports                      --
------------------------------------------------------------

import Brian.BTag   ( BTag )
import Brian.Entry  ( Entry, actresses, description, medium, parseEntries,
                      parseEntry, printEntry, recordNumber, tags, title )
import Brian.ID     ( ID(ID, unID), to‚Ñ§ )
import Brian.Medium ( Medium )

--------------------------------------------------------------------------------

openURL' ‚à∑ String ‚Üí String ‚Üí IO String
openURL' x t = let content_type = "application/x-www-form-urlencoded"
                   postRequest  = postRequestWithBody x content_type t
               in  getResponseBody =<< simpleHTTP postRequest

brian ‚à∑ MonadIO Œº ‚áí Œº String
brian = liftIO $ openURL' "http://brianspage.com/query.php" "description=gag"


(‚âà) ‚à∑ Tag ùïã ‚Üí ùïä ‚Üí ùîπ
(‚âà) tag t = (~==) tag ("<" ‚äï t ‚äï ">")

(‚ââ) ‚à∑ Tag ùïã ‚Üí ùïä ‚Üí ùîπ
(‚ââ) tag t = (~/=) tag ("<" ‚äï t ‚äï ">")

text ‚à∑ [Tag ùïã] ‚Üí ùïã
text = unwords ‚àò words ‚àò innerText

entryParagraphs ‚à∑ [Tag ùïã] ‚Üí [ùïã]
entryParagraphs p = filter (‚â¢ "") $ text ‚ä≥‚ä≥ partitions (‚âà "br")
                                 $ takeWhile (‚ââ "/blockquote") p

makeTable ‚à∑ MonadIO Œº ‚áí Connection ‚Üí Œº ()
makeTable conn = liftIO $ do
  -- CR mpearce: it would be nice if we had a direct qq for Query
  let sql = fromString $ unpack [trimming|
              CREATE TABLE IF NOT EXISTS Records
                ( id          INTEGER PRIMARY KEY
                , title       TEXT
                , medium      TEXT
                , actresses   TEXT
                , tags        TEXT
                , description TEXT)
            |]
  execute_ conn sql

newtype Table = Table { unTable :: ùïã }
  deriving newtype (IsString, Show)

instance Printable Table where print = P.text ‚àò unTable

newtype Column = Column { unColumn :: ùïã }
  deriving newtype (Eq, IsString, Ord, Show)

instance Printable Column where print = P.text ‚àò unColumn

columnID ‚à∑ Column ‚Üí ùïã
columnID = (":"‚äï) ‚àò unColumn

infix 5 ~
(~) ‚à∑ ToField œÑ ‚áí Column ‚Üí œÑ ‚Üí (Column,SQLData)
a ~ b = (a, toField b)

newtype EntryData = EntryData { unEntryData :: Map.Map Column SQLData }
  deriving (Show)

instance IsList EntryData where
  type instance Item EntryData = (Column, SQLData)
  fromList = EntryData ‚àò fromList
  toList = Map.toList ‚àò unEntryData

data Insert = Insert { _iTable     :: Table
                     , _iEntryData :: NonEmpty EntryData
                     , _iExtra     :: ùïÑ ùïã
                     }
  deriving (Show)

iTable ‚à∑ Lens' Insert Table
iTable = lens _iTable (\ i t ‚Üí i { _iTable = t })

iEntryData ‚à∑ Lens' Insert (NonEmpty EntryData)
iEntryData = lens _iEntryData (\ i d ‚Üí i { _iEntryData = d })

iExtra ‚à∑ Lens' Insert (ùïÑ ùïã)
iExtra = lens _iExtra (\ i x ‚Üí i { _iExtra = x })

iEClause ‚à∑ Insert ‚Üí ùïã
iEClause i = maybe "" (" "‚äï) (i ‚ä£ iExtra)

iKeys ‚à∑ Insert ‚Üí [Column]
iKeys = Map.keys ‚àò unEntryData ‚àò NonEmpty.head ‚àò view iEntryData

iQuery ‚à∑ Insert ‚Üí Query
iQuery i = fromString $
  let keys = iKeys i
  in  [fmt|INSERT INTO %T (%L) VALUES (%L)%T|] (i ‚ä£ iTable) keys
                                               (columnID ‚ä≥ keys) (iEClause i)

iData ‚à∑ Insert ‚Üí [[NamedParam]]
iData =
  fmap (\ (k,v) ‚Üí (columnID k := v)) ‚àò itoList ‚àò unEntryData
                                     ‚©∫ Base1.toList ‚àò view iEntryData

insertSimple ‚à∑ Connection ‚Üí Insert ‚Üí IO ()
insertSimple conn i = forM_ (iData i) $ executeNamed conn (iQuery i)

insertSimple' ‚à∑ (MonadIO Œº, FromRow r) ‚áí Connection ‚Üí Insert ‚Üí Œº [[r]]
insertSimple' conn i = liftIO $ forM (iData i) $ queryNamed conn (iQuery i)

entryData ‚à∑ Entry ‚Üí Map.Map Column SQLData
entryData e =  [ "id"          ~ e ‚ä£ recordNumber
               , "title"       ~ e ‚ä£ title
               , "medium"      ~ e ‚ä£ medium
               , "actresses"   ~ intercalate "\v" (e ‚ä£ actresses)
               , "description" ~ intercalate "\v" (reverse $ e ‚ä£ description)
               , "tags"        ~ (""‚à∑ùïã)
               ]

tagsInsert ‚à∑ TagsTable ‚Üí Entry ‚Üí ([Insert], TagsTable)
tagsInsert tgs e =
  let tgs_max = maximum $ ID 0 : Map.elems tgs
      tg_new = Set.difference (fromList $ e ‚ä£ tags) (bTags tgs)
      tg_insert ‚à∑ [(BTag,ID)]
      tg_insert = zip (Base1.toList tg_new) (drop 1 [tgs_max..])

      mk_tag_row (b,i) = ["id" ~ i, "tag" ~ b]

      tg_inserts = case nonEmpty tg_insert of
        ùïπ    ‚Üí []
        ùïµ ys ‚Üí
          let entry_data = (mk_tag_row ‚ä≥ ys)
          in  [ Insert "Tags" (EntryData ‚ä≥ entry_data) ùïπ ]
  in  (tg_inserts, Map.union tgs (fromList tg_insert))

entryInsert ‚à∑ Entry ‚Üí Insert
entryInsert e =
  Insert "Records" (pure $ EntryData $ entryData e)
                   (ùïµ "ON CONFLICT (id) DO NOTHING RETURNING (id)")

type TagsTable = Map.Map BTag ID

bTags ‚à∑ TagsTable ‚Üí Set.Set BTag
bTags = fromList ‚àò Map.keys

withTransactionPrivate ‚à∑ MonadIO Œº ‚áí Connection ‚Üí IO a ‚Üí Œº a
withTransactionPrivate conn action =
  liftIO $ mask $ \restore -> do
    begin
    r <- restore action `onException` rollback
    commit
    return r
  where
    begin    = execute_ conn $ "BEGIN TRANSACTION"
    commit   = execute_ conn $ "COMMIT TRANSACTION"
    rollback = execute_ conn $ "ROLLBACK TRANSACTION"

insertEntry ‚à∑ (MonadIO Œº, Default œâ, MonadLog (Log œâ) Œº) ‚áí
              Connection ‚Üí TagsTable ‚Üí Entry ‚Üí Œº TagsTable
insertEntry conn tgs e = do
  liftIO ‚àò execute_ conn $ "BEGIN TRANSACTION"
  let insert = entryInsert e
      name  = fromMaybe "NO-TITLE" $ e ‚ä£ title
  tgs' ‚Üê insertSimple' conn insert ‚â´ \ case
    [[Only (n :: ID)]] ‚Üí do
      infoT $ [fmt|inserted %d (%t)|] (unID n) name
      insertTags conn tgs e n
    _ ‚Üí infoT ([fmt|no insert of %t|] name) ‚™º return tgs
  liftIO ‚àò execute_ conn $ "COMMIT TRANSACTION"
  -- execute_ conn $ "ROLLBACK TRANSACTION" -- in emergency‚Ä¶
  return tgs'

insertTags ‚à∑ MonadIO Œº ‚áí Connection ‚Üí TagsTable ‚Üí Entry ‚Üí ID ‚Üí Œº TagsTable
insertTags conn tgs e rid = liftIO $ do
  let (ins, tgs') = tagsInsert tgs e
  forM_ ins $ insertSimple conn
  case nonEmpty (e ‚ä£ tags) of
    ùïπ ‚Üí return ()
    ùïµ tg_ids' ‚Üí do
      let mkref t = ["recordid" ~ rid, "tagid" ~ Map.lookup t tgs']
      insertSimple conn $ Insert "TagRef" (mkref ‚ä≥ tg_ids') ùïπ
  return tgs'

getTagsTable ‚à∑ MonadIO Œº ‚áí Connection ‚Üí Œº TagsTable
getTagsTable conn = liftIO $ do
  let sql = "SELECT tag,id FROM Tags"
  rows ‚Üê query_ conn sql
  return $ Map.fromList rows

buildTables ‚à∑ AsTextualParseError Œµ ‚áí
              Connection ‚Üí [Tag ùïã] ‚Üí LoggingT (Log MockIOClass) (ExceptT Œµ IO) ()
buildTables conn ts = do
  tags_table ‚Üê getTagsTable conn
  makeTable conn
  parseEntries ts ‚â´ foldM_ (insertEntry conn) tags_table

data Options = Options { _dbFile    :: File
                       , _inputFile :: ùïÑ File
                       }

dbFile ‚à∑ Lens' Options File
dbFile = lens _dbFile (\ o f ‚Üí o { _dbFile = f })

inputFile ‚à∑ Lens' Options (ùïÑ File)
inputFile = lens _inputFile (\ o f ‚Üí o { _inputFile = f })

optionsParser ‚à∑ Parser Options
optionsParser = Options ‚ä≥ (argument readM $ metavar "SQLITE-DB")
                        ‚äµ optional (argument readM $ metavar "INPUT-FILE")

doMain ‚à∑ (AsIOError Œµ, AsTextualParseError Œµ, AsUsageError Œµ) ‚áí
         DoMock ‚Üí Options ‚Üí LoggingT (Log MockIOClass) (ExceptT Œµ IO) ()
doMain do_mock opts = do
  if do_mock ‚â° DoMock then throwUsageT "dry-run not yet implemented" else return ()
  conn ‚Üê case opts ‚ä£ dbFile of -- sequence $ liftIO . open ‚àò toString ‚ä≥ opts ‚ä£ dbFile
           FileR r | r ‚â° [relfile|-|] ‚Üí return ùïπ
           x                          ‚Üí liftIO $ ùïµ ‚ä≥ open (toString x)
  t    ‚Üê case opts ‚ä£ inputFile of
           ùïµ f ‚Üí readFileUTF8Lenient f
           ùïπ   ‚Üí pack ‚ä≥ brian

  let ts ‚à∑ [Tag ùïã] = parseTags t

  case conn of
    ùïπ   ‚Üí parseEntries ts ‚â´ mapM_ printEntry
    ùïµ c ‚Üí buildTables c ts

main ‚à∑ IO ()
main =
  let desc ‚à∑ ùïã = "manipulate a brianDB"
  in  getArgs ‚â´ stdMain desc optionsParser (doMain @UsageFPIOTPError)

-- that's all, folks! ----------------------------------------------------------
