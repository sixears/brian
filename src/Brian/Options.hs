{-# LANGUAGE UnicodeSyntax #-}

module Brian.Options
  ( EntryFilter
  , Mode(..)
  , Options
  , dbFile
    --  , inputFile
  , mode
  , optionsParser
  ) where

import Base1T

-- base --------------------------------

import Control.Applicative ( optional )

-- fpath -------------------------------

import FPath.File      ( File )
import FPath.Parseable ( readM )

-- optparse-applicative ----------------

import Options.Applicative ( CommandFields, Mod, Parser, argument, auto,
                             command, help, info, long, metavar, option,
                             progDesc, short, subparser )

-- optparse-plus -----------------------

import OptParsePlus qualified

-- textual-plus ------------------------

import TextualPlus.Error.TextualParseError ( AsTextualParseError )

------------------------------------------------------------
--                     local imports                      --
------------------------------------------------------------

import Brian.Day         ( Day )
import Brian.EntryFilter ( EntryFilter )
import Brian.OptParser   ( optParse )
import Brian.SQLiteError ( AsSQLiteError )

--------------------------------------------------------------------------------

data Mode = ModeCreate (ùïÑ File) (ùïÑ Day)
          | ModeReCreate (ùïÑ File) (ùïÑ Day)
          | ModeAdd (ùïÑ File) (ùïÑ Day)
          | ModeQuery EntryFilter (ùïÑ ‚Ñ§)

------------------------------------------------------------

data Options Œµ = Options { _mode   :: Mode
                         , _dbFile :: File
                         }

--------------------

mode ‚à∑ Lens' (Options Œµ) Mode
mode = lens _mode (\ o m ‚Üí o { _mode = m })

--------------------

dbFile ‚à∑ Lens' (Options Œµ) File
dbFile = lens _dbFile (\ o f ‚Üí o { _dbFile = f })

----------------------------------------

optionsParser ‚à∑ (AsSQLiteError Œµ, AsTextualParseError Œµ, Printable Œµ) ‚áí
                Parser (Options Œµ)
optionsParser =
  let input_file = argument readM $ metavar "INPUT-FILE"
      entry_date = option OptParsePlus.readM (—é [ long "entry-date"
                                                , short 'd',help "entry-date" ])
      mode_commands ‚à∑ [Mod CommandFields Mode] =
        [ command "create"
                  (info (ModeCreate ‚ä≥ optional input_file
                                    ‚äµ optional entry_date)
                        (progDesc "build a new database"))
        , command "recreate"
                  (info (ModeReCreate ‚ä≥ optional input_file
                                      ‚äµ optional entry_date)
                        (progDesc "rebuild a database"))
        , command "add"
                  (info (ModeAdd ‚ä≥ optional input_file
                                 ‚äµ optional entry_date)
                        (progDesc "add to an existing database"))
        , command "query"
                  (info (ModeQuery ‚ä≥ optParse ‚äµ optional (option auto (short 'y' ‚äï long "days" ‚äï help "look back n days' entries"))) (progDesc "query the database"))
        ]
  in  Options ‚ä≥ subparser (—é mode_commands)
              ‚äµ argument readM (metavar "SQLITE-DB")

-- that's all, folks! ----------------------------------------------------------
