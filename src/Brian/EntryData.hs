{-# LANGUAGE UnicodeSyntax #-}
module Brian.EntryData
  ( -- TagsTable
    --   , getTagsTable
    EntryTable
  , insertEntry
  , readEntry
  ) where

import Base1T hiding ( toList )

-- base --------------------------------

import Data.List  ( filter )
import Data.Proxy ( Proxy(Proxy) )
import GHC.Exts   ( IsList(toList) )

-- containers --------------------------

import Data.Map.Strict qualified as Map

-- logging-effect ----------------------

import Control.Monad.Log ( MonadLog, Severity(Debug, Informational) )

-- logs-plus ---------------------------

import Log ( Log, infoT )

-- mockio-log --------------------------

import MockIO.IOClass ( HasIOClass )
import MockIO.Log     ( DoMock, HasDoMock )

-- natural -----------------------------

import Natural ( length )

-- sqlite-simple -----------------------

import Database.SQLite.Simple ( Connection, FromRow, Only(Only), Query(Query),
                                SQLData, ToRow, fromOnly, query_ )
-- text --------------------------------

import Data.Text qualified as Text

------------------------------------------------------------
--                     local imports                      --
------------------------------------------------------------

import Brian.BTag        ( BTag, TagsRow, TagsTable, btags, tagsRows )
import Brian.Entry       ( Entry(Entry), EntryRow, entryRow, tags, title )
import Brian.ID          ( ID(ID, unID) )
import Brian.SQLite      ( ColumnDesc(ColumnDesc),
                           ColumnFlag(NoInsert, PrimaryKey),
                           ColumnName(unColumnName),
                           ColumnType(CTypeInteger, CTypeText),
                           Table(columns, tName, type RowType), TableName,
                           execute, execute_, insertTableRows, insertTableRows_,
                           query, withinTransaction )
import Brian.SQLiteError ( AsSQLiteError, throwSQLMiscError )

--------------------------------------------------------------------------------

-- type TagsTable = Map.Map BTag ID

------------------------------------------------------------

{- | A map from column to SQL data -}
newtype SQLDataMap = SQLDataMap { unSQLDataMap :: Map.Map ColumnName SQLData }
  deriving (Show)

instance IsList SQLDataMap where
  type instance Item SQLDataMap = (ColumnName, SQLData)
  fromList = SQLDataMap ‚àò fromList
  toList = Map.toList ‚àò unSQLDataMap

------------------------------------------------------------

data EntryTable

------------------------------------------------------------

instance Table EntryTable where
  type instance RowType EntryTable = EntryRow
  tName   _ = "Entry"
  columns _ = (ColumnDesc "id" CTypeInteger [PrimaryKey]) :| [ ColumnDesc "title" CTypeText []
                                           , ColumnDesc "medium" CTypeText []
                                           , ColumnDesc "actresses" CTypeText []
                                           , ColumnDesc "description" CTypeText [] ]

------------------------------------------------------------

{- An insert description for a single row; the table, the data to insert
   (potentially multiple rows; certainly ‚â• 1); and any additional clauses
   required. -}
data Insert = Insert { _iTable      :: TableName
                     , _iSQLDataMap :: NonEmpty SQLDataMap
                     , _iExtra      :: ùïÑ ùïã
                     }
  deriving (Show)

------------------------------------------------------------

insertTags_ ‚à∑ (MonadIO Œº, AsSQLiteError Œµ, Printable Œµ, MonadError Œµ Œº,
               Default œâ, HasIOClass œâ, HasDoMock œâ, MonadLog (Log œâ) Œº) ‚áí
              Connection ‚Üí Entry ‚Üí DoMock ‚Üí Œº [(TagsRow,[Only ID])]
insertTags_ conn e mck =
  let extra = Text.intercalate " " [ "ON CONFLICT (id) DO NOTHING"
                                   , "ON CONFLICT (tag) DO NOTHING"
                                   , "RETURNING (id)"
                                   ]
      pTags = Proxy ‚à∑ Proxy TagsTable
  in  insertTableRows_ Informational pTags conn (tagsRows $ e ‚ä£ tags) extra mck

------------------------------------------------------------

insertTags ‚à∑ (MonadIO Œº, AsSQLiteError Œµ, Printable Œµ, MonadError Œµ Œº,
              Default œâ, HasIOClass œâ, HasDoMock œâ, MonadLog (Log œâ) Œº) ‚áí
             Connection ‚Üí Entry ‚Üí DoMock ‚Üí Œº [(TagsRow,[Only ID])]
insertTags conn e mck = withinTransaction conn mck $ insertTags_ conn e mck

----------------------------------------

insertEntry_ ‚à∑ ‚àÄ Œµ œâ Œº .
              (MonadIO Œº, Default œâ, MonadLog (Log œâ) Œº,
               AsSQLiteError Œµ, Printable Œµ, MonadError Œµ Œº,
               MonadLog (Log œâ) Œº, Default œâ, HasIOClass œâ, HasDoMock œâ) ‚áí
              Connection ‚Üí Entry ‚Üí DoMock ‚Üí Œº (ùïÑ ID)
insertEntry_ conn e mck = do
  let name  = e ‚ä£ title
  row_ids ‚Üê insertTableRows_ Informational (Proxy ‚à∑ Proxy EntryTable) conn [entryRow e] "ON CONFLICT (id) DO NOTHING RETURNING (id)" mck

  case row_ids of
    [(_, [Only (n ‚à∑ ID)])] ‚Üí do
      infoT $ [fmt|inserted %d (%T)|] (unID n) name
-- XXX pass tags, not e, here
      insertTags_ conn e mck
      let tgs = e ‚ä£ tags
      let sql = Query $ [fmt|INSERT INTO TagRef (recordid, tagid) SELECT %d,id FROM Tag WHERE tag IN (%L)|] (unID n) (const ("?"‚à∑ùïã) ‚ä≥ toList tgs)
      execute @_ @[ùïã] Informational conn sql (toText ‚ä≥ toList tgs) mck
      return $ ùïµ n
    _ ‚Üí return ùïπ

  -- INSERT INTO TagRef (recordid, tagid) SELECT 1,id FROM Tag WHERE tag IN ('country_us','gagtype_cleave');
-- Insert TagRef

  -- execute_ conn $ "ROLLBACK TRANSACTION" -- in emergency‚Ä¶

insertEntry conn e mck = withinTransaction conn mck $ insertEntry_ conn e mck

----------------------------------------

getTagsTable ‚à∑ MonadIO Œº ‚áí Connection ‚Üí Œº (Map.Map BTag ID)
getTagsTable conn = liftIO $ do
  let sql = "SELECT tag,id FROM Tag"
  rows ‚Üê query_ conn sql
  return $ Map.fromList rows

----------------------------------------

readEntry ‚à∑ ‚àÄ Œµ œâ Œº .
            (MonadIO Œº, Default œâ, MonadLog (Log œâ) Œº,
             AsSQLiteError Œµ, Printable Œµ, MonadError Œµ Œº,
             MonadLog (Log œâ) Œº, Default œâ, HasIOClass œâ, HasDoMock œâ) ‚áí
            Connection ‚Üí ID ‚Üí DoMock ‚Üí Œº (ùïÑ Entry)
readEntry conn eid mck = do
  let sql = "SELECT title,medium,actresses,description FROM Entry WHERE ID = ?"
  query Informational conn sql (Only eid) [] mck ‚â´ \ case
    []                    ‚Üí return ùïπ
    [(ttle,mdm,act,desc)] ‚Üí do
      let sql' = "SELECT tag FROM Tag,TagRef WHERE recordid = ? AND id = tagid"
      tgs ‚Üê btags ‚ä≥ (fromOnly ‚ä≥‚ä≥query Informational conn sql' (Only eid) [] mck)
      return ‚àò ùïµ $ Entry eid ttle (ùïµ mdm) act tgs desc
    xs                    ‚Üí
      throwSQLMiscError $ [fmtT|too many (%d) entries found for %d|]
                          (unID eid) (length xs)
  -- XXX tags

-- that's all, folks! ----------------------------------------------------------
