{-# LANGUAGE UnicodeSyntax #-}
module Brian.EntryFilter
  ( EntryFilter
  , entryMatches
  , gFilt
  , titleSTs
  ) where

import Base1T hiding ( toList )

-- base --------------------------------

import Data.Foldable ( and, or )
import Data.List     ( repeat, zip )
import Data.Maybe    ( fromMaybe )
import GHC.Exts      ( toList )
import Text.Read     ( read )

-- lens --------------------------------

import Control.Lens.Getter ( view )

-- options-applicative -----------------

import Options.Applicative ( eitherReader, help, long, option, short,
                             strOption )

-- optparse-plus -----------------------

import OptParsePlus ( OptReader(readM) )

-- parsers -----------------------------

import Text.Parser.Char        ( char, digit )
import Text.Parser.Combinators ( sepBy )

-- pcre --------------------------------

import PCRE      ( PCRE, (?=~) )
import PCRE.Base ( pcre, reSource )

-- regex -------------------------------

import Text.RE.TDFA ( matched )

-- regex-with-pcre ---------------------

import Text.RE.PCRE.Text ()

-- text --------------------------------

import Data.Text qualified as T

-- text-printer ------------------------

import Text.Printer qualified as P

-- textual-plus ------------------------

import TextualPlus ( TextualPlus(textual'), parseTextual )

------------------------------------------------------------
--                     local imports                      --
------------------------------------------------------------

import Brian.Entry     ( Entry, actresses, description, episode, title )
import Brian.Episode   ( EpisodeID(unEpisodeID), epID, epName )
import Brian.OptParser ( OptParser(optParse) )

--------------------------------------------------------------------------------

newtype EpIDFilter = EpIDFilter { unEpIDFilter :: [‚Ñï] }
  deriving (Eq)

instance Printable EpIDFilter where
  print = P.text ‚àò T.intercalate "." ‚àò fmap (T.pack ‚àò show) ‚àò unEpIDFilter

instance TextualPlus EpIDFilter where
  textual' = EpIDFilter ‚ä≥ (read ‚ä≥ some digit) `sepBy` char '.'

instance OptReader EpIDFilter where
  readM = eitherReader $ parseTextual

matchEpID ‚à∑ EpIDFilter ‚Üí EpisodeID ‚Üí ùîπ
matchEpID (EpIDFilter fs) (unEpisodeID ‚Üí ds) =
   and [ maybe ùï± (‚â° f) d  | (f,d) ‚Üê zip fs ((ùïµ ‚ä≥ ds) ‚äï repeat ùïπ) ]

------------------------------------------------------------

data EntryFilter = EntryFilter { _titleREs :: [PCRE]
                               , _titleSTs :: [ùïã]
                               , _actrsREs :: [PCRE]
                               , _descsREs :: [PCRE]
                               , _epnamREs :: [PCRE]
                               , _epidFs   :: [EpIDFilter]
                               }

titleREs ‚à∑ Lens' EntryFilter [PCRE]
titleREs = lens _titleREs (\ f t ‚Üí f { _titleREs = t })

titleSTs ‚à∑ Lens' EntryFilter [ùïã]
titleSTs = lens _titleSTs (\ f t ‚Üí f { _titleSTs = t })

actrsREs ‚à∑ Lens' EntryFilter [PCRE]
actrsREs = lens _actrsREs (\ f t ‚Üí f { _actrsREs = t })

descsREs ‚à∑ Lens' EntryFilter [PCRE]
descsREs = lens _descsREs (\ f t ‚Üí f { _descsREs = t })

epnamREs ‚à∑ Lens' EntryFilter [PCRE]
epnamREs = lens _epnamREs (\ f t ‚Üí f { _epnamREs = t })

epidFs ‚à∑ Lens' EntryFilter [EpIDFilter]
epidFs = lens _epidFs (\ f t ‚Üí f { _epidFs = t })

--------------------

instance Show EntryFilter where
  show (EntryFilter ts tx as ds ens eis) =
    [fmt|EntryFilter %t|]
      (T.intercalate " " $
       (\ (n,x) ‚Üí [fmt|{%t: %L}|] n x) ‚ä≥ [ ("titleREs", reSource ‚ä≥ ts)
                                         , ("titleSTs", T.unpack ‚ä≥ tx)
                                         , ("actrsREs", reSource ‚ä≥ as)
                                         , ("descnREs", reSource ‚ä≥ ds)
                                         , ("epnamREs", reSource ‚ä≥ ens)
                                         , ("epidFs"  , toString ‚ä≥ eis)
                                         ])

--------------------

instance OptParser EntryFilter where
  optParse = EntryFilter ‚ä≥ many (option readM (—é [ long "title"
                                                 , short 't'
                                                 , help "title match PCRE"
                                                 ]))
                         ‚äµ many (strOption (—é [ long "title-filter"
                                                 , short 'T'
                                                 , help "title LIKE filter"
                                                 ]))
                         ‚äµ many (option readM (—é [ long "actress"
                                                 , short 'a'
                                                 , help "actress match PCRE"
                                                 ]))
                         ‚äµ many (option readM (—é [ long "description"
                                                 , short 'd'
                                                 , help "description match PCRE"
                                                 ]))
                         ‚äµ many (option readM (—é [ long "epname"
                                                 , long "episode-name"
                                                 , short 'e'
                                                 , help "episode name PCRE"
                                                 ]))
                         ‚äµ many (option readM (—é [ long "epid"
                                                 , long "episode-id"
                                                 , short 'p'
                                                 , help "episode ID"
                                                 ]))

----------------------------------------

gFilt ‚à∑ Entry ‚Üí ùîπ
gFilt e =
-- XXX
  let flt = [pcre|(?<!\\bno)\\s+gag|]
  in  or [ matched $ toText(e ‚ä£ description) ?=~ flt ]

entryMatches ‚à∑ EntryFilter ‚Üí Entry ‚Üí ùîπ
entryMatches flt e =
  let actrs_match re  = (matched ‚àò (?=~re) ‚àò toText) ‚ä≥ toList (e ‚ä£ actresses)
      epname          = toText ‚ä≥ (e ‚ä£ episode ‚â´ view epName)
      epnam_match re  = maybe ùï± (\ n ‚Üí matched $ n ?=~ re) epname
      epid_match epif = fromMaybe ùï± (matchEpID epif ‚ä≥ (view epID ‚ä≥ e‚ä£ episode))
      descn           = toText $ e ‚ä£ description
  in  and $ —é [ [ matched $ toText(e ‚ä£ title) ?=~ re | re ‚Üê flt ‚ä£ titleREs ]
              , [ matched $ descn             ?=~ re | re ‚Üê flt ‚ä£ descsREs ]
              , (epnam_match ‚ä≥ flt ‚ä£ epnamREs)
              , [ or (actrs_match re)                | re ‚Üê flt ‚ä£ actrsREs ]
                -- this should be an OR, i.e., ep ‚â° 7.3 or ep ‚â° 10.2 ...
              , [ (flt ‚ä£ epidFs) ‚â° [] ‚à® or (epid_match ‚ä≥ flt ‚ä£ epidFs) ]
              ]

-- that's all, folks! ----------------------------------------------------------
