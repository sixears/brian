{-# LANGUAGE UnicodeSyntax #-}
module Brian.EntryFilter
  ( EntryFilter
  , entryMatches
  ) where

import Base1T hiding ( toList )

-- base --------------------------------

import Data.Foldable ( and, or )
import GHC.Exts      ( toList )

-- lens --------------------------------

import Control.Lens.Getter ( view )

-- options-applicative -----------------

import Options.Applicative ( help, long, option, short )

-- optparse-plus -----------------------

import OptParsePlus ( readM )

-- pcre --------------------------------

import PCRE      ( PCRE, (?=~) )
import PCRE.Base ( reSource )

-- regex -------------------------------

import Text.RE.TDFA ( matched )

-- regex-with-pcre ---------------------

import Text.RE.PCRE.Text ()

------------------------------------------------------------
--                     local imports                      --
------------------------------------------------------------

import Brian.Entry     ( Entry, actresses, episode, title )
import Brian.Episode   ( epName )
import Brian.OptParser ( OptParser(optParse) )

--------------------------------------------------------------------------------

data EntryFilter = EntryFilter { _titleREs :: [PCRE]
                               , _actrsREs :: [PCRE]
                               , _epnamREs :: [PCRE]
                               }

titleREs ‚à∑ Lens' EntryFilter [PCRE]
titleREs = lens _titleREs (\ f t ‚Üí f { _titleREs = t })

actrsREs ‚à∑ Lens' EntryFilter [PCRE]
actrsREs = lens _actrsREs (\ f t ‚Üí f { _actrsREs = t })

epnamREs ‚à∑ Lens' EntryFilter [PCRE]
epnamREs = lens _epnamREs (\ f t ‚Üí f { _epnamREs = t })

--------------------

instance Show EntryFilter where
  show (EntryFilter ts as ens) =
    [fmt|EntryFilter {titleREs: %L} {actrsREs: %L} {epnamREs: %L}|]
      (reSource ‚ä≥ ts) (reSource ‚ä≥ as) (reSource ‚ä≥ ens)

--------------------

instance OptParser EntryFilter where
  optParse = EntryFilter ‚ä≥ many (option readM (—é [ long "title"
                                                 , short 't'
                                                 , help "title match PCRE"
                                                 ]))
                         ‚äµ many (option readM (—é [ long "actress"
                                                 , short 'a'
                                                 , help "actress match PCRE"
                                                 ]))
                         ‚äµ many (option readM (—é [ long "epname"
                                                 , long "episode-name"
                                                 , short 'e'
                                                 , help "episode name PCRE"
                                                 ]))

----------------------------------------

entryMatches ‚à∑ EntryFilter ‚Üí Entry ‚Üí ùîπ
entryMatches flt e =
  let actrs_match pcre = (matched ‚àò (?=~pcre) ‚àò toText) ‚ä≥ toList (e ‚ä£ actresses)
      epname           = toText ‚ä≥ (e ‚ä£ episode ‚â´ view epName)
      epnam_match pcre = maybe ùï± (\ n ‚Üí matched $ n ?=~ pcre) epname
  in  and $ —é [ [ matched $ toText(e ‚ä£ title) ?=~ pcre | pcre ‚Üê flt ‚ä£ titleREs ]
              , [ epnam_match pcre                     | pcre ‚Üê flt ‚ä£ epnamREs ]
              , [ or (actrs_match pcre)                | pcre ‚Üê flt ‚ä£ actrsREs ]
              ]

-- that's all, folks! ----------------------------------------------------------
