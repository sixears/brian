{-# LANGUAGE UnicodeSyntax #-}

{- Tags, from Brian's database.  We use 'BTag' to avoid confusion with HTML
   tags from Text.HTML.TagSoup -}

module Brian.BTag
  ( BTag(unBTag)
  , BTags(unBTags)
  , TagRefTable
  , TagTable
  , TagsRow(TagsRow)
  , btags
  , insertEntryTags
  , insertEntryTags_
  , insertTagRefs
  , insertTagRefs_
  , insertTags
  , insertTags_
  , tagsRows
  ) where

import Base1T hiding ( toList )

-- base --------------------------------

import Data.Monoid ( Monoid )
import Data.Proxy  ( Proxy(Proxy) )
import GHC.Exts    ( IsString, toList )

-- logging-effect ----------------------

import Control.Monad.Log ( MonadLog, Severity(Informational) )

-- logs-plus ---------------------------

import Log ( Log )

-- mockio-log --------------------------

import MockIO.IOClass ( HasIOClass )
import MockIO.Log     ( DoMock, HasDoMock )

-- parsers -----------------------------

import Text.Parser.Char        ( oneOf )
import Text.Parser.Combinators ( sepBy, (<?>) )

-- sqlite-simple -----------------------

import Database.SQLite.Simple           ( Connection, Only, Query(Query),
                                          SQLData(SQLText), ToRow(toRow) )
import Database.SQLite.Simple.FromField ( FromField(fromField) )
import Database.SQLite.Simple.ToField   ( ToField(toField) )

-- text --------------------------------

import Data.Text qualified as T

-- text-printer ------------------------

import Text.Printer qualified as P

-- textual-plus ------------------------

import TextualPlus ( TextualPlus(textual') )

------------------------------------------------------------
--                     local imports                      --
------------------------------------------------------------

import Brian.ID          ( ID(unID) )
import Brian.SQLite      ( ColumnDesc(ColumnDesc),
                           ColumnFlag(FlagUnique, NoInsert, PrimaryKey),
                           ColumnType(CTypeInteger, CTypeText),
                           Table(columns, tName, type RowType), execute,
                           insertTableRows_, withinTransaction )
import Brian.SQLiteError ( AsSQLiteError )

--------------------------------------------------------------------------------

newtype BTag = BTag { unBTag :: ùïã }
  deriving (Eq, Ord, Show)
  deriving newtype (IsString)

instance Printable BTag where
  print = P.text ‚àò unBTag

instance TextualPlus BTag where
  textual' = let chars = "-_/ " ‚äï ['0'..'9'] ‚äï ['a'..'z'] ‚äï ['A'..'Z']
             in  BTag ‚àò T.pack ‚ä≥ many (oneOf chars) <?> "BTag"

instance ToField BTag where
  toField = toField ‚àò unBTag

instance FromField BTag where
  fromField = BTag ‚©∫ fromField

------------------------------------------------------------

newtype BTags = BTags { unBTags :: [BTag] }
  deriving (Show)
  deriving newtype (Eq, Monoid, Semigroup)

instance IsList BTags where
  type instance Item BTags = BTag
  fromList = BTags
  toList   = unBTags

instance Printable BTags where
  print (BTags bs) = P.text $ T.intercalate ", " (toText ‚ä≥ bs)

instance TextualPlus BTags where
  textual' = (BTags ‚ä≥ textual' `sepBy` some (oneOf " .,<>:;()")) <?> "BTags"

btags ‚à∑ [ùïã] ‚Üí BTags
btags ts = BTags $ BTag ‚ä≥ ts

------------------------------------------------------------

newtype TagsRow = TagsRow BTag
  deriving (Show)

instance ToRow TagsRow where
  toRow (TagsRow btag) = [SQLText $ unBTag btag]

tagsRows ‚à∑ BTags ‚Üí [TagsRow]
tagsRows = TagsRow ‚©∫ unBTags

------------------------------------------------------------

data TagTable

instance Table TagTable where
  type instance RowType TagTable = TagsRow
  tName   _ = "Tag"
  columns _ =    ColumnDesc "id" CTypeInteger [NoInsert,PrimaryKey]
            :| [ ColumnDesc "tag" CTypeText [FlagUnique] ]
----------------------------------------

insertTags_ ‚à∑ (MonadIO Œº, AsSQLiteError Œµ, Printable Œµ, MonadError Œµ Œº,
               Default œâ, HasIOClass œâ, HasDoMock œâ, MonadLog (Log œâ) Œº) ‚áí
              Connection ‚Üí BTags ‚Üí DoMock ‚Üí Œº [(TagsRow,[Only ID])]
insertTags_ conn tgs mck =
  let extra = T.intercalate " " [ "ON CONFLICT (id) DO NOTHING"
                                , "ON CONFLICT (tag) DO NOTHING"
                                , "RETURNING (id)"
                                ]
      pTags = Proxy ‚à∑ Proxy TagTable
  in  insertTableRows_ Informational pTags conn (tagsRows tgs) extra mck

--------------------

insertTags ‚à∑ (MonadIO Œº, AsSQLiteError Œµ, Printable Œµ, MonadError Œµ Œº,
              Default œâ, HasIOClass œâ, HasDoMock œâ, MonadLog (Log œâ) Œº) ‚áí
             Connection ‚Üí BTags ‚Üí DoMock ‚Üí Œº [(TagsRow,[Only ID])]
insertTags conn tgs mck = withinTransaction conn mck $ insertTags_ conn tgs mck

------------------------------------------------------------

data TagsRefRow = TagsRefRow ID ID

instance ToRow TagsRefRow where
  toRow (TagsRefRow recordid tagid) = [toField recordid, toField tagid]

------------------------------------------------------------

data TagRefTable

instance Table TagRefTable where
  type instance RowType TagRefTable = TagsRefRow
  tName   _ = "TagRef"
  columns _ =    ColumnDesc "recordid" CTypeInteger []
            :| [ ColumnDesc "tagid" CTypeInteger [] ]

----------------------------------------

insertTagRefs_ ‚à∑ (MonadIO Œº,
                  AsSQLiteError Œµ, Printable Œµ, MonadError Œµ Œº,
                  HasDoMock œâ, HasIOClass œâ, Default œâ, MonadLog (Log œâ) Œº) ‚áí
                 Connection ‚Üí ID ‚Üí BTags ‚Üí DoMock ‚Üí Œº ()
insertTagRefs_ conn n tgs =
  let sql =
        let insert = "INSERT INTO TagRef (recordid, tagid)"
        in  Query $ [fmt|%t SELECT %d,id FROM Tag WHERE tag IN (%L)|]
                    insert (unID n) (const ("?"‚à∑ùïã) ‚ä≥ toList tgs)
  in  execute @_ @[ùïã] Informational conn sql (toText ‚ä≥ toList tgs)

--------------------

insertTagRefs ‚à∑ (MonadIO Œº,
                 AsSQLiteError Œµ, Printable Œµ, MonadError Œµ Œº,
                 HasDoMock œâ, HasIOClass œâ, Default œâ, MonadLog (Log œâ) Œº) ‚áí
                Connection ‚Üí ID ‚Üí BTags ‚Üí DoMock ‚Üí Œº ()
insertTagRefs conn n tgs mck =
  withinTransaction conn mck $ insertTagRefs_ conn n tgs mck

----------------------------------------

insertEntryTags_ ‚à∑ (MonadIO Œº,
                    AsSQLiteError Œµ, Printable Œµ, MonadError Œµ Œº,
                    HasDoMock œâ, HasIOClass œâ, Default œâ, MonadLog (Log œâ) Œº) ‚áí
                   Connection ‚Üí ID ‚Üí BTags ‚Üí DoMock ‚Üí Œº ()
insertEntryTags_ conn n tgs mck = do
  _ ‚Üê insertTags_ conn tgs mck
  insertTagRefs_ conn n tgs mck

--------------------

insertEntryTags ‚à∑ (MonadIO Œº,
                   AsSQLiteError Œµ, Printable Œµ, MonadError Œµ Œº,
                   HasDoMock œâ, HasIOClass œâ, Default œâ, MonadLog (Log œâ) Œº) ‚áí
                  Connection ‚Üí ID ‚Üí BTags ‚Üí DoMock ‚Üí Œº ()
insertEntryTags conn n tgs mck =
  withinTransaction conn mck $ insertEntryTags_ conn n tgs mck


-- that's all, folks! ----------------------------------------------------------
